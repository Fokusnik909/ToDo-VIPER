//
//  DebugTasksSeeder.swift
//  ToDo VIPER
//
//  Created by Артур  Арсланов on 11.08.2025.
//

#if DEBUG
import Foundation
import CoreData

enum DebugTasksSeeder {
    static func seed(count: Int, core: CoreDataManager = .shared) {
        let bg = core.newBackgroundContext()
        bg.undoManager = nil
        bg.mergePolicy = NSMergeByPropertyObjectTrumpMergePolicy

        bg.perform {
            let base: Int64 = 100_000
            let lastID: Int64 = {
                let req: NSFetchRequest<ToDoCoreData> = ToDoCoreData.fetchRequest()
                req.sortDescriptors = [NSSortDescriptor(key: "id", ascending: false)]
                req.fetchLimit = 1
                return (try? bg.fetch(req).first?.id) ?? (base - 1)
            }()

            var nextID = lastID + 1

            let now = Date()
            for i in 0..<count {
                let model = TaskModel(
                    id: nextID,
                    title: "Debug Task #\(i)",
                    description: Bool.random() ? "Autogenerated lorem \(Int.random(in: 0...999))" : "",
                    dateCreated: Calendar.current.date(byAdding: .second, value: -Int.random(in: 0...10_000), to: now) ?? now,
                    isCompleted: Bool.random(),
                    userId: 1
                )
                _addOrUpdate(model, in: bg)
                nextID += 1
            }

            do { try bg.save() } catch { print("Seeder save error:", error) }
        }
    }

    static func wipe(core: CoreDataManager = .shared) {
        core.deleteAllTasks()
    }

    private static func _addOrUpdate(_ model: TaskModel, in context: NSManagedObjectContext) {
        let request: NSFetchRequest<ToDoCoreData> = ToDoCoreData.fetchRequest()
        request.predicate = NSPredicate(format: "id == %d", model.id)

        if let existing = try? context.fetch(request).first {
            existing.title = model.title
            existing.descriptionText = model.description
            existing.isCompleted = model.isCompleted
            existing.userid = model.userId
        } else {
            let task = ToDoCoreData(context: context)
            task.id = model.id
            task.title = model.title
            task.descriptionText = model.description
            task.isCompleted = model.isCompleted
            task.userid = model.userId
            task.dateCreated = model.dateCreated
        }
    }
}
#endif
